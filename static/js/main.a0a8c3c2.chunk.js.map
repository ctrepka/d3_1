{"version":3,"sources":["logo.svg","Components/BarChart.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BarChart","useState","data","setData","svgRef","useRef","svgWrapperRef","dimensions","ref","setDimensions","useEffect","observeTarget","current","resizeObserver","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve","useResizeObserver","svg","select","console","log","xScale","scaleBand","domain","map","value","index","range","width","padding","yScale","scaleLinear","height","colorScale","xAxis","axisBottom","ticks","length","style","call","yAxis","axisRight","selectAll","join","attr","bandwidth","on","enter","append","text","transition","remove","Fragment","className","onClick","v","slice","concat","Math","floor","random","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a0a8c3c2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useRef, useState } from 'react';\r\n\r\nimport { select, scaleLinear, axisBottom, axisRight, scaleBand } from \"d3\";\r\n\r\n\r\nconst useResizeObserver = (ref) => {\r\n    const [dimensions, setDimensions] = useState(null);\r\n    useEffect( () => {\r\n        const observeTarget = ref.current;\r\n        const resizeObserver = new ResizeObserver((entries) => {\r\n            entries.forEach( entry => {\r\n                setDimensions(entry.contentRect);\r\n            });\r\n            // set the resized dimensions here later\r\n        });\r\n        \r\n        resizeObserver.observe(observeTarget)\r\n        return () => {\r\n            resizeObserver.unobserve(observeTarget)\r\n        }\r\n    }, [ref])\r\n    \r\n    return dimensions;\r\n};\r\n\r\nconst BarChart = () => {\r\n\r\n  const [data, setData] = useState([25, 30, 54, 12, 123, 44, 60, 121])\r\n  const svgRef = useRef();\r\n  const svgWrapperRef = useRef();\r\n\r\n  const dimensions = useResizeObserver(svgWrapperRef)\r\n\r\n  useEffect(() => {\r\n    const svg = select(svgRef.current);\r\n    \r\n    console.log(dimensions)\r\n\r\n    if(!dimensions) return;\r\n\r\n    const xScale = scaleBand()\r\n      .domain(data.map((value, index) => index))\r\n      .range([0, dimensions.width])\r\n      .padding(0.5)\r\n\r\n    const yScale = scaleLinear()\r\n      .domain([0, 200])\r\n      .range([dimensions.height, 0])\r\n    \r\n    const colorScale = scaleLinear()\r\n      .domain([0, 100, 200])\r\n      .range(['green', 'orange', 'red'])\r\n    \r\n    const xAxis = axisBottom(xScale).ticks(data.length)\r\n    svg.select('.x-axis')\r\n      .style('transform', `translateY(${dimensions.height}px)`)\r\n      .call(xAxis)\r\n\r\n    const yAxis = axisRight(yScale)\r\n    svg.select('.y-axis')\r\n      .style('transform', `translateX(${dimensions.width}px)`)\r\n      .call(yAxis)\r\n\r\n    svg.selectAll('.bar')\r\n      .data(data)\r\n      .join('rect')\r\n      .attr('class', 'bar')\r\n      .style('transform', 'scale(1, -1)')\r\n      .attr('x', (value, index) => xScale(index))\r\n      .attr('y', -dimensions.height)\r\n      .attr('width', xScale.bandwidth())\r\n      .on('mouseenter', (value, index) => {\r\n        svg.selectAll('.tooltip')\r\n          .data([value])\r\n          .join(enter => enter.append('text').attr('y', yScale(value) + 8))\r\n          .attr('class', 'tooltip')\r\n          .text(value)\r\n          .attr('x', xScale(index) + xScale.bandwidth() / 2 )\r\n          .attr('text-anchor', 'middle')\r\n          .transition()\r\n          .attr('y', yScale(value + 4))\r\n          .attr('opacity', 1)\r\n      })\r\n      .on('mouseleave', () => svg.select('.tooltip').remove())\r\n      .transition()\r\n      .attr('fill', colorScale)\r\n      .attr('height', value => dimensions.height - yScale(value) )\r\n\r\n  }, [data, dimensions]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n        <div ref={svgWrapperRef}>\r\n            <svg ref={svgRef}>\r\n                <g className='x-axis'></g>\r\n                <g className='y-axis'></g>\r\n            </svg>\r\n        </div>\r\n        \r\n\r\n        <div className='chart_controls'>\r\n            <button onClick={(v) => { setData(data.map(v => v - 5)); console.log(data) }}>\r\n            Decrease\r\n            </button>\r\n            <button onClick={(v) => { setData(data.map(v => v + 5)); console.log(data) }}>\r\n            Increase\r\n            </button>\r\n\r\n            <button onClick={(v) => { setData(data.slice(1, data.length - 1)); console.log(data) }}>\r\n            Remove Value\r\n            </button>\r\n            <button onClick={(v) => { setData(data.concat([Math.floor(Math.random() * 201)])); console.log(data) }}>\r\n            Add Value\r\n            </button>\r\n        </div>\r\n\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default BarChart;\r\n","import React, { useEffect, useRef, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport BarChart from './Components/BarChart'\n\nimport { select, line, curveCardinal, scaleLinear, axisBottom, axisRight, scaleBand } from \"d3\";\n\nfunction App() {\n\n\n  const [data, setData] = useState([25, 30, 54, 12, 123, 44, 60, 121])\n\n\n  return (\n    <React.Fragment>\n      <BarChart data={data} />\n      <BarChart data={data} />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}